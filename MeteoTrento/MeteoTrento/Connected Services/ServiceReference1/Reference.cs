//------------------------------------------------------------------------------
// <auto-generated>
//     Questo codice è stato generato da uno strumento.
//
//     Le modifiche apportate a questo file possono causare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomNamespace
{
    using System.Runtime.Serialization;

    // L'attributo DebuggerStepThrough indica al debugger di non interrompere l'esecuzione del codice in questo punto.
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    // L'attributo GeneratedCode fornisce informazioni sullo strumento di generazione del codice.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    // L'attributo DataContract indica che la classe è un contratto dati per la serializzazione/deserializzazione.
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherForecastOutput", Namespace="http://tempuri.org/")]
    public partial class WeatherForecastOutput : object
    {
        // Campi privati per memorizzare i valori delle proprietà.
        private string dayField;
        private string iconDescriptionField;
        private string timeSlotField;
        private int minTemperatureField;
        private int maxTemperatureField;
        private string iconField;

        // Proprietà per rappresentare il giorno della previsione.
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Day
        {
            get
            {
                return this.dayField;
            }
            set
            {
                this.dayField = value;
            }
        }

        // Proprietà per la descrizione dell'icona della previsione.
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string IconDescription
        {
            get
            {
                return this.iconDescriptionField;
            }
            set
            {
                this.iconDescriptionField = value;
            }
        }

        // Proprietà per rappresentare la fascia oraria della previsione.
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string TimeSlot
        {
            get
            {
                return this.timeSlotField;
            }
            set
            {
                this.timeSlotField = value;
            }
        }

        // Proprietà per la temperatura minima prevista.
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=3)]
        public int MinTemperature
        {
            get
            {
                return this.minTemperatureField;
            }
            set
            {
                this.minTemperatureField = value;
            }
        }

        // Proprietà per la temperatura massima prevista.
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=4)]
        public int MaxTemperature
        {
            get
            {
                return this.maxTemperatureField;
            }
            set
            {
                this.maxTemperatureField = value;
            }
        }

        // Proprietà per rappresentare l'icona associata alla previsione.
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconField = value;
            }
        }
    }

    // Interfaccia per definire il contratto del servizio WCF.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CustomNamespace.IWeatherService")]
    public interface IWeatherService
    {
        // Metodo asincrono per cercare previsioni meteo.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/search", ReplyAction="*")]
        System.Threading.Tasks.Task<CustomNamespace.SearchResponse> SearchAsync(CustomNamespace.SearchRequest request);
    }

    // Classe per rappresentare la richiesta del servizio.
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SearchRequest
    {
        // Corpo del messaggio della richiesta.
        [System.ServiceModel.MessageBodyMemberAttribute(Name="search", Namespace="http://tempuri.org/", Order=0)]
        public CustomNamespace.SearchRequestBody Body;

        // Costruttore di default.
        public SearchRequest()
        {
        }

        // Costruttore che accetta un corpo della richiesta.
        public SearchRequest(CustomNamespace.SearchRequestBody Body)
        {
            this.Body = Body;
        }
    }

    // Classe che rappresenta il corpo della richiesta del servizio.
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SearchRequestBody
    {
        // Data della previsione richiesta.
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string Date;

        // Costruttore di default.
        public SearchRequestBody()
        {
        }

        // Costruttore che accetta una data.
        public SearchRequestBody(string Date)
        {
            this.Date = Date;
        }
    }

    // Classe per rappresentare la risposta del servizio.
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SearchResponse
    {
        // Corpo del messaggio della risposta.
        [System.ServiceModel.MessageBodyMemberAttribute(Name="searchResponse", Namespace="http://tempuri.org/", Order=0)]
        public CustomNamespace.SearchResponseBody Body;

        // Costruttore di default.
        public SearchResponse()
        {
        }

        // Costruttore che accetta un corpo della risposta.
        public SearchResponse(CustomNamespace.SearchResponseBody Body)
        {
            this.Body = Body;
        }
    }

    // Classe che rappresenta il corpo della risposta del servizio.
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SearchResponseBody
    {
        // Array di risultati delle previsioni meteo.
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public CustomNamespace.WeatherForecastOutput[] SearchResult;

        // Costruttore di default.
        public SearchResponseBody()
        {
        }

        // Costruttore che accetta un array di risultati.
        public SearchResponseBody(CustomNamespace.WeatherForecastOutput[] SearchResult)
        {
            this.SearchResult = SearchResult;
        }
    }

    // Interfaccia che rappresenta il canale di comunicazione per il servizio.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IWeatherServiceChannel : CustomNamespace.IWeatherService, System.ServiceModel.IClientChannel
    {
    }

    // Classe client per interagire con il servizio meteo.
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<CustomNamespace.IWeatherService>, CustomNamespace.IWeatherService
    {
        // Metodo parziale per configurare l'endpoint.
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        // Costruttore di default per il client del servizio.
        public WeatherServiceClient() :
                base(WeatherServiceClient.GetDefaultBinding(), WeatherServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWeatherService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        // Costruttore che accetta una configurazione di endpoint.
        public WeatherServiceClient(EndpointConfiguration endpointConfiguration) :
                base(WeatherServiceClient.GetBindingForEndpoint(endpointConfiguration), WeatherServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        // Costruttore che accetta una configurazione di endpoint e un indirizzo remoto.
        public WeatherServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(WeatherServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        // Costruttore che accetta una configurazione di endpoint e un indirizzo di endpoint remoto.
        public WeatherServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(WeatherServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        // Costruttore che accetta un binding e un indirizzo di endpoint remoto.
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        // Implementazione del metodo di ricerca asincrono definito nell'interfaccia del servizio.
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CustomNamespace.SearchResponse> CustomNamespace.IWeatherService.SearchAsync(CustomNamespace.SearchRequest request)
        {
            return base.Channel.SearchAsync(request);
        }

        // Metodo di convenienza per eseguire la ricerca asincrona utilizzando solo la data come input.
        public System.Threading.Tasks.Task<CustomNamespace.SearchResponse> SearchAsync(string date)
        {
            CustomNamespace.SearchRequest inValue = new CustomNamespace.SearchRequest();
            inValue.Body = new CustomNamespace.SearchRequestBody();
            inValue.Body.Date = date;
            return ((CustomNamespace.IWeatherService)(this)).SearchAsync(inValue);
        }

        // Metodo per aprire la connessione al servizio in modo asincrono.
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        // Metodo per ottenere il binding configurato per un determinato endpoint.
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWeatherService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("The endpoint named '{0}' was not found.", endpointConfiguration));
        }

        // Metodo per ottenere l'indirizzo di endpoint configurato per un determinato endpoint.
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWeatherService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:32773/Service.wsdl");
            }
            throw new System.InvalidOperationException(string.Format("The endpoint named '{0}' was not found.", endpointConfiguration));
        }

        // Metodo per ottenere il binding di default per il servizio.
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WeatherServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWeatherService);
        }

        // Metodo per ottenere l'indirizzo di endpoint di default per il servizio.
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WeatherServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWeatherService);
        }

        // Enumerazione per rappresentare le configurazioni di endpoint supportate.
        public enum EndpointConfiguration
        {
            BasicHttpBinding_IWeatherService,
        }
    }
}
